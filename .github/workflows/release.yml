name: üè∑Ô∏è Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests and build
        run: |
          pnpm run lint
          pnpm run type-check
          pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: "https://dummy.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "dummy-key-for-build"

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            sed -n '/## \[.*\]/,/## \[.*\]/p' CHANGELOG.md | head -n -1 > current_changelog.md
          else
            # Generate basic changelog from git commits
            echo "## Changes" > current_changelog.md
            git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> current_changelog.md
          fi
          
          # Set output for release notes
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat current_changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: |
            # Servinoo Web Application ${{ github.ref_name || github.event.inputs.version }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## üöÄ Deployment
            This release has been automatically deployed to production.
            
            ## üì¶ Installation
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd servinoo-web-application
            git checkout ${{ github.ref_name || github.event.inputs.version }}
            pnpm install
            pnpm run build
            ```
            
            ## üîó Links
            - [Documentation](https://github.com/${{ github.repository }}/wiki)
            - [Issues](https://github.com/${{ github.repository }}/issues)
            - [Pull Requests](https://github.com/${{ github.repository }}/pulls)
          draft: false
          prerelease: ${{ contains(github.ref_name || github.event.inputs.version, 'alpha') || contains(github.ref_name || github.event.inputs.version, 'beta') || contains(github.ref_name || github.event.inputs.version, 'rc') }}

      - name: Update package.json version
        if: github.event.inputs.version
        run: |
          # Remove 'v' prefix if present
          VERSION=${{ github.event.inputs.version }}
          VERSION=${VERSION#v}
          
          # Update package.json
          npm version $VERSION --no-git-tag-version
          
          # Commit and push
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to $VERSION" || exit 0
          git push

      - name: Create deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              description: 'Release ${{ github.ref_name || github.event.inputs.version }} deployment',
              auto_merge: false,
              required_contexts: []
            });

      - name: Notify on success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            // You can add notification integrations here (Slack, Discord, etc.)
            console.log('üéâ Release ${{ github.ref_name || github.event.inputs.version }} created successfully!');

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            console.log('‚ùå Release creation failed. Please check the logs.');
            // You can add failure notification integrations here