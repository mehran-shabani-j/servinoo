name: ðŸš€ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job to check for changes in specific directories
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      deps: ${{ steps.changes.outputs.deps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'styles/**'
              - 'public/**'
              - '*.config.*'
              - 'tsconfig.json'
              - '.eslintrc.*'
            deps:
              - 'package.json'
              - 'pnpm-lock.yaml'

  # Dependency installation and caching
  install:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Lint job
  lint:
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.src == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

        run: pnpm build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run Prettier check (if available)
        run: |
          if grep -q "prettier" package.json; then
            pnpm exec prettier --check .
          else
            echo "Prettier not configured, skipping..."
          fi

  # Type checking job
  typecheck:
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.src == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: pnpm run type-check

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: [changes, install, lint, typecheck]
    if: needs.changes.outputs.src == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # Security audit
  security:
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.deps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Success job that depends on all other jobs
  success:
    runs-on: ubuntu-latest
    needs: [changes, lint, typecheck, build]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.changes.result }}" == "failure" ]] || 
             [[ "${{ needs.lint.result }}" == "failure" ]] || 
             [[ "${{ needs.typecheck.result }}" == "failure" ]] || 
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs completed successfully"
          fi

      - name: Add PR comment on success
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… All CI checks passed! Ready for review.'
            })

